<?php

namespace Tests\Unit;

use App\Exceptions\NoRouteFoundException;
use App\Services\TrainRoute;
use App\Station;
use Illuminate\Support\Facades\Cache;
use Tests\TestCase;

class TrainRouteTest extends TestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $database = $this->app->make('db');

        $database->dropCollection('stations');
    }

    /** @test */

    function can_get_shortest_paths_between_given_stations()
    {
        factory(Station::class)->create([
            'name' => 'poznań',
            'destinations' => ['łódź']
        ]);

        factory(Station::class)->create([
            'name' => 'warszawa',
            'destinations' => ['łódź',]
        ]);

        factory(Station::class)->create([
            'name' => 'łódź',
            'destinations' => ['poznań', 'warszawa', 'katowice']
        ]);

        factory(Station::class)->create([
            'name' => 'katowice',
            'destinations' => ['łódź']
        ]);

        $start = 'poznań';
        $destination = 'katowice';

        $routes = (new TrainRoute($start, $destination))->getShortestRoutes();

        $this->assertEquals(2,$routes->getDistance());

        $this->assertArraySubset([[
                "poznań",
                "łódź",
                "katowice"
        ]], $routes->getRoutes());
    }

    /** @test */
    function throws_a_NoRouteFoundException_when_there_is_no_connection_for_given_stations()
    {
        factory(Station::class)->create([
            'name' => 'poznań',
            'destinations' => []
        ]);

        factory(Station::class)->create([
            'name' => 'warszawa',
            'destinations' => []
        ]);

        $start = 'poznań';
        $destination = 'warszawa';

        $this->expectException(NoRouteFoundException::class);

        (new TrainRoute($start, $destination))->getShortestRoutes();
    }

    /** @test */
    function when_available_calculateShortestRoutes_result_is_taken_from_cache()
    {
        $start = 'poznań';
        $destination = 'warszawa';

        Cache::shouldReceive('rememberForever')
            ->once()
            ->with('shortest:'. $start, \Closure::class)
            ->andReturn();

        $adjacencyHash = [
            'poznan' => ['warszawa'],
            'warszawa' => ['poznań']
        ];

        (new TrainRoute($start, $destination))->calculateShortestRoutes($adjacencyHash);
    }
}