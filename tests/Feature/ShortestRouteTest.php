<?php

namespace Tests\Feature;

use App\Station;
use Illuminate\Support\Facades\Cache;
use Tests\TestCase;


class ShortestRouteTest extends TestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $database = $this->app->make('db');
        $database->dropCollection('stations');
    }

    /** @test */

    function user_can_find_shortest_routes_between_given_two_stations()
    {
        $this->seed(\DatabaseSeeder::class);

        $start = 'Poznań';
        $destination = "Rzeszów";

        $this->assertFalse(Cache::has('shortest_route:poznań:rzeszów'));

        $response = $this->get( "/api/shortest_route?start={$start}&destination={$destination}");

        $response->assertStatus(200)
                 ->assertJson([
                     "routes"=> [
                        [
                            "poznań",
                            "katowice",
                            "warszawa",
                            'rzeszów'
                        ],
                        [
                            "poznań",
                            "kraków",
                            "warszawa",
                            'rzeszów'
                        ],
                        [
                            "poznań",
                            "łódź",
                            "warszawa",
                            'rzeszów'
                        ]
                    ],
                     "distance" => 3
                 ]);

        $this->assertTrue(Cache::has('shortest_route:poznań:rzeszów'));
    }

    /** @test */
    function a_404_status_code_is_returned_when_there_is_no_connection_between_given_stations()
    {
        $this->seed(\DatabaseSeeder::class);

        factory(Station::class)->create([
            'name' => 'szczecin',
            'destinations' => []
        ]);

        $start = 'Poznań';
        $destination = "Szczecin";

        $response = $this->get( "/api/shortest_route?start={$start}&destination={$destination}");

        $response->assertStatus(404);
    }

    /** @test */
    function a_404_status_code_is_returned_when_start_station_has_no_connection_with_destination()
    {
        $this->seed(\DatabaseSeeder::class);

        factory(Station::class)->create([
            'name' => 'szczecin',
            'destinations' => []
        ]);

        $start = 'Szczecin';
        $destination = "Poznań";

        $response = $this->get( "/api/shortest_route?start={$start}&destination={$destination}");

        $response->assertStatus(404);
    }


    /** @test */

    function given_stations_have_to_exist()
    {
        factory(Station::class)->create([
            'name' => 'poznań'
        ]);

        $start = 'Poznań';
        $destination = "Non existent station";

        $response = $this->get( "/api/shortest_route?start={$start}&destination={$destination}");

        $response->assertStatus(422);
    }

    /** @test */

    function given_start_station_and_destination_can_not_be_the_same()
    {
        factory(Station::class)->create([
            'name' => 'poznań'
        ]);

        $start = 'Poznań';
        $destination = "Non existent station";

        $response = $this->get( "/api/shortest_route?start={$start}&destination={$destination}");

        $response->assertStatus(422);
    }

    /** @test */

    function start_station_and_destination_have_to_be_passed()
    {
        factory(Station::class)->create([
            'name' => 'poznań'
        ]);

        factory(Station::class)->create([
            'name' => 'poznań'
        ]);

        $start = 'Poznań';
        $destination = "Poznań";


        $response = $this->get( "/api/shortest_route?start={$start}&destination={$destination}");

        $response->assertStatus(422);
    }
}
